'''
!
Напишите функцию draw_triangle(), которая выводит звездный равнобедренный
треугольник с основанием и высотой равными 1515 и 88 соответственно:
       *
      ***
     *****
    *******
   *********
  ***********
 *************
***************
Для вывода треугольника используйте цикл for.
'''
'''
def draw_triangle():
    for i in range(8):
        print(' ' * (7 - i) + '*' * (2 * i + 1))

draw_triangle()
'''

'''
Калькулятор доставки
Интернет магазин осуществляет экспресс доставку для своих товаров по
цене 1000 рублей за первый товар и 120 рублей за каждый
последующий товар. Напишите функцию get_shipping_cost(quantity),
которая принимает в качестве аргумента натуральное число
quantity – количество товаров в заказе и возвращает стоимость доставки.
'''
'''
def get_shipping_cost(quantity):
    return 1000 + 120 * (quantity - 1)

print(get_shipping_cost(int(input())))
'''

'''
Биномиальный коэффициент
Напишите функцию compute_binom(n, k), которая принимает в
качестве аргументов два натуральных числа n и k и возвращает
значение биномиального коэффициента, равного
n!/(k!(n-k)!)
Факториалом натурального числа n, называется произведение всех натуральных
чисел от 1 до n, то есть n! = 1*2*3*..
Примечание 2. Реализуйте вспомогательную функцию factorial(n), вычисляющую
факториал числа или воспользуйтесь уже готовой функцией из модуля math
'''
'''
def factorial(n):
    answer = 1
    for i in range(1, n+1):
        answer *= i
    return answer

def compute_binom(n, k):
    return int(factorial(n)/(factorial(k)*factorial(n - k)))

print(compute_binom(int(input()), int(input())))
'''

'''
Число словами
Напишите функцию number_to_words(num), которая принимает в качестве аргумента
натуральное число num и возвращает его словесное описание на русском языке.
Считайте, что число 1 ≤ num ≤ 99
'''
'''
vocab_ed = ["ноль", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять"]
vocab_d1 = ["десять", "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать", "шестнадцать", "семнадцать", "восемнадцать", "девятнадцать"]
vocab_d2 = ["двадцать", "тридцать", "сорок", "пятьдесят", "шестьдесят", "семьдесят", "восемьдесят", "девяносто"]

def number_to_words(num):
    answer = ''
    if 1 <= num < 10:
        answer = vocab_ed[num]
    elif 10 <= num < 20:
        answer = vocab_d1[num - 10]
    elif num % 10 == 0:
        answer = vocab_d2[int(num//10 - 2)]
    else:
        answer = vocab_d2[int(num//10 - 2)] + " " + vocab_ed[int(num % 10)]
    return answer

print(number_to_words(int(input())))
'''

'''
Искомый месяц
Напишите функцию get_month(language, number), которая
принимает на вход два аргумента language – язык ru
или en и number – номер месяца (от 1 до 12) и возвращает
название месяца на русском или английском языке.
'''
'''
voc_rus = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
voc_eng = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']

def get_month(language, number):
    if language == 'ru':
        print(voc_rus[number - 1])
    elif language == 'en':
        print(voc_eng[number - 1])

get_month(input(), int(input()))
'''

'''
Магические даты
Магическая дата – это дата, когда день, умноженный на месяц, равен числу
образованному последними двумя цифрами года.
Напишите функцию, is_magic(date) которая принимает в качестве аргумента
строковое представление корректой даты и возвращает значение True если
дата является магической и False в противном случае.
'''
'''
def is_magic(date):
    d = date.split('.')
    if int(d[0])*int(d[1]) == int(d[2][2:]):
        return True
    else:
        return False

print(is_magic(input()))
'''

'''
Панграммы
Панграмма – это фраза, содержащая в себе все буквы алфавита. 
Обычно панграммы используют для презентации шрифтов, чтобы 
можно было в одной фразе рассмотреть все глифы.
Напишите функцию, is_pangram(text) которая принимает в качестве 
аргумента строку текста на английском языке и возвращает значение 
True если текст является панграммой и False в противном случае.
'''
'''
vocab = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

def is_pangram(text):
    flag = True
    text = text.lower()
    for i in vocab:
        if i not in text:
            flag = False
    return flag

print(is_pangram(input()))
'''
