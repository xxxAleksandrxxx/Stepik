#%%
# 1. Каждый n-ый элемент
'''
На вход программе подается строка текста, содержащая символы и число n. Из данной строки формируется список. Напишите программу, которая разделяет список на вложенные подсписки так, что n последовательных элементов принадлежат разным подспискам.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела и число n на отдельной строке.

Формат выходных данных
Программа должна вывести указанный вложенный список.

Примечание. Графическая иллюстрация для теста:
'''
'''
# v1
#st = input().split()
#n = int(input())
st1 = 'a b c d e f g h i j k l m n'.split()
st2 = 'a b c d e f g h i j k l m n'.split()
st = st2
n = 2
len_st = len(st)
answer = []
first = 0
#list_number = -1
for list_number in range(n):
    answer.append([])
    for i in range(first, len_st, n):
        answer[list_number].append(st[i])
    first += 1

print(answer)
'''
#%%
# 2. Максимальный в области 2
'''
Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной матрицы (побочная диагональ и правее).
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.

Формат выходных данных
Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной матрицы.

Примечание. Элементы побочной диагонали также учитываются.
'''
'''
# v1
# n = int(input())
# mx = [[int(elem) for elem in input().split()] for _ in range(n)]
# test data
n1 = 3
mx1 = [[1, 4, 5], [6, 7, 8], [1, 1, 6]]
n2 = 4
mx2 = [[0, 1, 4, 6], [0, 0, 2, 5], [0, 0, 0, 7], [0, 0, 0 ,0]]
n = n2
mx = mx2

max_el = mx[0][n-1]
for i in range(n):
    for j in range(n):
        if n+~i <= j:
            if mx[i][j] > max_el:
                max_el = mx[i][j]
            #print(f'mx[{i}][{j}] = {mx[i][j]}')
        # print(f'i={i};  ~i={~i};  n+~i={n+~i}, j={j},  ~j={~j}')
print(max_el)
#print('mx[0][ n-1]', mx[0][n-1])
'''
#%%
# 3. Транспонирование матрицы
'''
Напишите программу, которая транспонирует квадратную матрицу.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.

Формат выходных данных
Программа должна вывести транспонированную матрицу.

Примечание 1. Транспонированная матрица — матрица, полученная из исходной матрицы заменой строк на столбцы.
Примечание 2. Задачу можно решить без использования вспомогательного списка. 
'''
'''
# v1
# n = int(input())
# mx = [[int(elem) for elem in input().split()] for _ in range(n)]

n1 = 3
mx1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

n = n1
mx = mx1

answer = [[0]*n for _ in range(n)]
for i in range(n):
    for j in range(n):
        answer[i][j] = mx[j][i]

for row in answer:
    for el in row:
        print(str(el).ljust(3), end='')
    print()
'''
'''
# v2
# n = int(input())
# mx = [[int(elem) for elem in input().split()] for _ in range(n)]

n1 = 3
mx1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

n = n1
mx = mx1
for i in range(n):
    for j in range(i):
        mx[i][j], mx[j][i] = mx[j][i], mx[i][j]

for row in mx:
    for el in row:
        print(str(el).ljust(3), end='')
    print()
'''

#%%
# 4. Снежинка
'''
На вход программе подается нечетное натуральное число n. Напишите программу, которая создает матрицу размером n×n заполнив её символами . . Затем заполните символами * среднюю строку и столбец матрицы, главную и побочную диагональ матрицы. Выведите полученную матрицу на экран, разделяя элементы пробелами.

Формат входных данных
На вход программе подается нечетное натуральное число n, (n≥3) — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу в соответствии с условием задачи.
'''
'''
# v1
n = int(input())
mx = [['.']*n for _ in range(n)]

for i in range(n):
    for j in range(n):
        if (i==j) or (i==n+~j) or (i==n//2) or (j==n//2):
            #print('i', i, 'j', j)
            mx[i][j] = '*'


for row in mx:
    for el in row:
        print(el, end = ' ')
    print()
'''
#%%
# 5. Симметричная матрица
'''
Напишите программу проверки симметричности квадратной матрицы относительно побочной диагонали.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.

Формат выходных данных
Программа должна вывести YES, если матрица симметрична, и слово NO в противном случае.
'''
'''
# v1
n = int(input())
mx = [[int(elem) for elem in input().split()] for _ in range(n)]

# n = 3
# mx1 = [[0, 1, 2], [1, 2, 7], [2, 3, 4]]
# mx2 = [[0, 3, 10], [4, 9, 3], [7, 4, 0]]
# mx = mx2

#[print(*row) for row in mx]

answer = 'YES'
for i in range(n):
    for j in range(i-1, n):
        # print(f'i={i} j={j} mx[{i}][{j}]', mx[i][j], f'mx[{n-j-1}][{n-i-1}]', mx[n-j-1][n-i-1])
        #print(f'i={i} j={j} mx[{i}][{j}]', mx[i][j], f'mx[{~j}][{~i}]', mx[~j][~i])
        if mx[i][j] != mx[~j][~i]:
            #print('mx[i][j]', mx[i][j], 'mx[~j][~i]', mx[~j][~i])
            answer = 'NO'
            break
print(answer)
'''