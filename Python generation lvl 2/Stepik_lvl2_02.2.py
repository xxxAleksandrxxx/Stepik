'''
Task 1
Координатные четверти
Дан набор точек на координатной плоскости. Необходимо подсчитать и вывести
количество точек, лежащих в каждой координатной четверти.
В первой строке - количество точек
Каждая следующая строка - два числа (координаты x y), разделенных пробелом
Точки лежащие на оси не относятся к четверти

II  |  I
____|____
III | IV
    |
'''
'''
def check(X, Y):            # определяем в какую четверть попали (индекс answer)
    X = int(X)
    Y = int(Y)
    if X > 0 and Y > 0:     # попали в первую четверть
        return 1         
    elif X < 0 and Y > 0:  # попали во вторую четверть
        return 2
    elif X < 0 and Y < 0:   # попали в третью четверть
        return 3
    elif X > 0 and Y < 0:   # попали в четвертую четверть
        return 4
    else:
        return 0            # попали на ось

answer = [['На оси:', 0],
          ['Первая четверть:', 0],
          ['Вторая четверть:', 0],
          ['Третья четверть:', 0],
          ['Четвертая четверть:', 0]]

gitn = int(input())
for _ in range(n):
    xy = input().split()
    answer[check(xy[0], xy[1])][1] += 1
for i in range(1, 5):
    print(answer[i][0], answer[i][1])
'''



'''
Task 2
Больше предыдущего
На вход программе подается строка текста из натуральных чисел. Из нее
формируется список чисел. Напишите программу подсчтета количества чисел,
которые больше предшествующего им в этом списке числа, то есть, стоят вслед
за меньшим числом.
На вход подается строка из разделенных пробелами натуральных чисел
'''
'''
numbers = [int(i) for i in input().split()]
count = 0
for i in range(len(numbers) - 1):
    if numbers[i + 1] > numbers[i]:
        count += 1
print(count)
'''



'''
Task 3
Назад, вперед и наоборот
На вход программе подается строка текста из натуральных чисел.
Из элементов строки формируется список чисел. Напишите программу, которая
меняет местами соседние элементы списка (a[0] с a[1], a[2] с a[3]). Если
в списке нечетное количество элементов, то последний останется на своем месте.
'''
'''
num = [int(i) for i in input().split()]
i = 0
len_num = len(num)
while i <= len_num - 2:
    num[i], num[i+1] = num[i+1], num[i]
    i += 2
print(*num)
'''
'''
num = [i for i in input().split()]
num[0:-1:2], num[1::2] = num[1::2], num[0:-1:2]
print(*num)
'''



'''
Task 4
Сдвиг в развитии
На вход программе подается строка текста из натуральных чисел. Из элементов
строки формируется список чисел. Напишите программу циклического сдвига
элементов списка вправо, когда последний элемент становится первым, а остальные
сдвигаются на одну позицию вперед, в сторону увеличения индексов.
На вход программе подается строка текста из разделенных пробелами натуральных
чисел.
Сдвига на k = 1
'''
'''
# через срезы
num = [i for i in input().split()]
num[1:], num[0] = num[:-1], num[-1]
print(*num)
'''
'''
# через .pop() и .insert()
num = [i for i in input().split()]
num.insert(0, num.pop())
print(*num)
'''



'''
Task 5
Различные элементны
На вход программе подается строка текста, содержащая натуральные числа,
расположенные по неубыванию. Из строки формируется список чисел.
Напишите программу для подсчета количества разных элементов в списке.
Вход: числа в строке разделены пробелом
Примечание: задачу можно решить без множеств.
'''
'''
#Через опереции со строкой
def first_num_from_st(stroka):
    answer = ''
    i = 0
    while stroka[i] != ' ':
        answer += stroka[i]
        i += 1
        if i == len(stroka):
            break
    return answer

st = input()
count = 1

while st.find(' ') > 0:
    num = first_num_from_st(st)
    st = st[len(num) + 1:]
    if num != first_num_from_st(st):
        count += 1

print(count)
'''
'''
#Через перевод в список и .pop()
st = [i for i in input().split()]

count = 1
while len(st) > 1:
    num = st[-1]
    st.pop()
    if num != st[-1]:
        count += 1
        
print(count)
'''
'''
#Через список и for
st = input().split()
count = 1
for i in range(len(st) - 1):
    if st[i] != st[i + 1]:
        count += 1
print(count)
'''



'''
Task 6
Произведение чисел
Напишите программу для определения, является ли число произведением двух
чисел из данного набора, выводящую результат в виде ответа "ДА" или "НЕТ".
В первой строке - число от 1 до 999 - к-во чисел в наборе.
В следующих - целые числа, составляющие набор (могут повторяться).
Затем - число, которое необходимо проверить.
'''
'''
n = int(input())
numbers = [int(input()) for i in range(n)]
chek_number = int(input())
f = False
for i in range(n - 1):
    for j in range(i + 1, n):
        if numbers[i] * numbers[j] == chek_number:
            print('ДА')
            f = True
            break
    if f:
        break
else:
    print('НЕТ')
'''



'''
Task 7
Камень, ножницы, бумага
Тимур и Руслан пытаются разделить фронт работы. Для этого они решили сыграть
в "камень, ножницы, бумага". Помогите ребятам бросить честный жребий и
определить, кто будет делать очередной модуль нового курса.
На вход: две строки текста, содержащие "камень", "ножницы", "бумага".
Первая строка - Тимур, вторая - Руслан.
Выход: результат игры, имя победителя или "ничья"
'''
'''
#Решение втупую
Timur = input()
Ruslan = input()
if Timur == Ruslan:
    print('ничья')
elif Timur == "камень" and Ruslan == "ножницы":
    print("Тимур")
elif Timur == "камень" and Ruslan == "бумага":
    print("Руслан")
elif Timur == "ножницы" and Ruslan == "камень":
    print("Руслан")
elif Timur == "ножницы" and Ruslan == "бумага":
    print("Тимур")
elif Timur == "бумага" and Ruslan == "ножницы":
    print("Руслан")
elif Timur == "бумага" and Ruslan == "камень":
    print("Тимур")
elif Timur == "бумага" and Ruslan == "камень":
    print("Тимур")
'''
'''
# Решение через индексы - сам не допер :(
Timur = input()
Ruslan = input()
variants = ["камень", "ножницы", "бумага"]
answer = ["ничья", "Руслан", "Тимур"]
print(answer[variants.index(Timur) - variants.index(Ruslan)])
'''



'''
Task 8
Камень, ножницы, бумага, ящерица, Спок
Ножницы режут бумагу. Бумага заворачивает камень. Камень давит ящерицу.
Ящерица травит Спока. Спок ломает ножницы. Ножницы отрезают голову ящерице.
Ящерица ест бумагу. На бумаге улики против Спока. Спок испаряет камень.
Камень затупляет ножницы.
На вход: две строки текста, содержащие по одному слову из перечня:
"камень", "ножницы", "бумага", "ящерица", "Спок".
Первая строка - Тимур
Вторая строка - Руслан.
Определить победителя.
'''
'''
variants = ["ножницы", "бумага", "камень", "ящерица", "Спок"]
result = ["ничья", "Руслан", "Тимур", "Руслан", "Тимур"]
T = input()
R = input()
print(result[variants.index(T) - variants.index(R)])
'''



'''
Task 9
Орел и решка
Дана строка текста, состоящая из букв русского алфавита "О" и "Р".
Буква "О" - Орел, "Р" - решка.
Напишите программу, подсчитывающую наибольшее к-во подряд выпавших Решек.
Если Решек нет - на вывод число 0
'''
'''
count = 0
count_max = 0
for i in input():
    if i == 'Р':
        count += 1
    else:
        count = 0
    count_max = max(count, count_max)
print(count_max)
'''
'''
st = input().split('О')
print(len(max(st)))
'''



'''
Task 10
Кремниевая долина
Искусственный интеллект Антон, созданный Гилфойлом, взломал сеть умных
холодильников. Теперь он использвет их в качестве серверов "Пегого дудочника".
Помогите владельцу фирмы отыскать все зараженные холодильники.
Для каждого холодильника существует строка с данными, состоящая из
строчных букв и цифр. Если в ней присутствует "anton" (не обязательно рядом
стоящие буквы, главное наличие последовательности букв), то холодильник
заражен и нужно вывести номер холодильника. нумерация начинается с единицы.
Формат входных данных: в первой строке подается число n - к-во холодильников.
В последующих n строках вводятся строки, содержащие латинские строчные буквы
и цифры. В каждой строке 5 - 100 символов.
Формат выходных данных: программа должна вывести номера зараженных холодильников
через пробел. Если таких холодильников нет, ничего выводить не нужно.
'''
##
##task_input = '''
##4
##alone
##antone
##aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaannnnnnnnnnnnnnnnnnnnnnnnnnntttttttttttttttttttttoooooooooonnnn
##anooooon
##'''
##n = int(task_input.split('\n')[1])
##base = task_input.split('\n')[2: -1]
##
##
##key_word = 'anton'
##len_key_word = len(key_word)
##
###n = int(input())
###base = [input() for _ in range(n)]
##
##numbers = []
##
##for i in range(n):
##    k = 0
##    for j in base[i]:
##        if j == key_word[k]:
##            k += 1
##            if k > len_key_word - 1:
##                break
##    if k == len_key_word:
##        numbers.append(i + 1)
##if numbers:
##    print(*numbers)



'''
Task 11
Роскомнадзор запретил букву "а".
Алгоритм выводит в конце предложения следующую в алфавитном порядке букву.
Если она встречается в строке текста. Следующая строка отображается
без этой буквы.
пример.
вход: роскомнадзор.
выход:
роскомнадзор запретил букву а
роскомндзор зпретил букву б
роскомндзор зпретил укву в
роскомндзор зпретил уку д
роскомнзор зпретил уку е
роскомнзор зпртил уку з
роскомнор пртил уку и
роскомнор пртл уку к
росомнор пртл уу л
росомнор прт уу м
росонор прт уу н
росоор прт уу о
рср прт уу п
рср рт уу р
с т уу с
т уу т
уу у
'''
alfabet = [chr(i) for i in range(1072, 1104)]
len_alfabet = len(alfabet)
st = input() + ' запретил букву'
i = 0
while st:
    print(st + ' ' + alfabet[i])
    st = st.replace(alfabet[i], '').strip().replace('  ', ' ')
    while alfabet[i] not in st and i < len_alfabet-1:
        i += 1

