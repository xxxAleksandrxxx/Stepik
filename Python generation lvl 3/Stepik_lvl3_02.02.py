#%% 02.04 - Функция hide_card()

"""Реализуйте функцию hide_card(), которая принимает один аргумент:

card_number — строка, представляющая собой корректный номер банковской карты из 16 цифр, между которыми могут присутствовать символы пробела
Функция должна заменять первые 12 цифр в строке card_number на символ * и возвращать полученный результат. Если между цифрами в номере имелись символы пробела, их следует удалить.

Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию hide_card(), но не код, вызывающий ее."""
# 02.4 v1
def hide_card(card_number):
    card_number = card_number.replace(' ', '')
    return '*'*12 + card_number[12:]

card = '905 678123 45612 56'
print(hide_card(card))

#%% 02.4 v2
def hide_card(card_number):
    return '*'*12 + card_number.replace(' ', '')[-4:]

card = '905 678123 45612 56'
print(hide_card(card))


#%% 02.5 - Функция same_parity()

"""Реализуйте функцию same_parity(), которая принимает один аргумент:

numbers — список целых чисел
Функция должна возвращать новый список, элементами которого являются числа из списка numbers, имеющие ту же четность, что и первый элемент этого списка.

Примечание 1. Числа в возвращаемом функцией списке должны располагаться в своем исходном порядке. 

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию same_parity(), но не код, вызывающий ее"""
# 02.5 v1
test = (
    [],
    [6, 0, 67, -7, 10, -20],
    [-7, 0, 67, -9, 70, -29, 90]
)

def same_parity(numbers):
    answer = []
    if numbers:
        answer = list(filter(lambda x: numbers[0]%2 == x%2, numbers))
    return answer

for t in test:
    print(same_parity(t))

#%% 02.5 v2
test = (
    [],
    [6, 0, 67, -7, 10, -20],
    [-7, 0, 67, -9, 70, -29, 90]
)

def same_parity(numbers):
    return [i for i in numbers if i%2==numbers[0]%2]

for t in test:
    print(same_parity(t))


#%% 02.6 - Функция is_valid()

"""Будем считать, что PIN-код является корректным, если он удовлетворяет следующим условиям:

состоит из 4, 5 или 6 символов
состоит только из цифр (0−9)
не содержит пробелов
Реализуйте функцию is_valid(), которая принимает один аргумент:

string — произвольная строка
Функция должна возвращать значение True, если строка string представляет собой корректный PIN-код, или False в противном случае.

Примечание 1. Если в функцию передается пустая строка, функция должна возвращать значение False.

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию is_valid(), но не код, вызывающий ее."""
# 02.6 v1
test = (
    '4367',
    '92134',
    '89abc1',
    '49 83'
)
def is_valid(string):
    return all([4 <= len(string) <= 6, ' ' not in string, string.isdigit()])

for t in test:
    print(is_valid(t))


#%% 02.6 v2
test = (
    '4367',
    '92134',
    '89abc1',
    '49 83'
)
def is_valid(string):
    return all([4 <= len(string) <= 6, string.isdigit()])

for t in test:
    print(is_valid(t))


#%% 02.7 - Функция print_given()

"""Реализуйте функцию print_given(), которая принимает произвольное количество позиционных и именованных аргументов и выводит все переданные аргументы, указывая тип каждого. Пары аргумент-тип должны выводиться каждая на отдельной строке, в следующем формате:

для позиционных аргументов:
<значение аргумента> <тип аргумента>
для именованных аргументов:
<имя переменной> <значение аргумента> <тип аргумента>
Примечание 1. При выводе позиционные аргументы должны быть расположены в порядке их передачи, именованные — в лексикографическом порядке имен переменных.

Примечание 2. При выводе сначала должны следовать все позиционные аргументы, затем — все именованные.

Примечание 3. Если в функцию ничего не передается, функция ничего не должна выводить.

Примечание 4. В тестирующую систему сдайте программу, содержащую только необходимую функцию print_given(), но не код, вызывающий ее."""
# 02.7 v1
def print_given(*arg, **kwarg):
    try:
        [print(a, type(a)) for a in arg]
        [print(k, v, type(v)) for k, v in sorted(kwarg.items())]
    except:
        pass

# print_given(1, [1, 2, 3], 'three', two=2)
print_given(b=2, d=4, c=3, a=1)

#%% 02.7 v2
def print_given(*arg, **kwarg):
        [print(a, type(a)) for a in arg]
        [print(k, v, type(v)) for k, v in sorted(kwarg.items())]

print_given(1, [1, 2, 3], 'three', two=2)
print_given(b=2, d=4, c=3, a=1)
print_given()

#%% 02.8 - Функция convert()

"""Реализуйте функцию convert(), которая принимает один аргумент:

string — произвольная строка
Функция должна возвращать строку string:

полностью в нижнем регистре, если букв в нижнем регистре в этой строке больше
полностью в верхнем регистре, если букв в верхнем регистре в этой строке больше
полностью в нижнем регистре, если количество букв в верхнем и нижнем регистрах в этой строке совпадает
Примечание 1. Символы строки, не являющиеся буквами, следует игнорировать.

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию convert(), но не код, вызывающий ее.
"""

def convert(string):
    return string.upper() if len(list(filter(lambda x: x.isupper(), string))) > len(list(filter(lambda x: x.islower(), string))) else string.lower()

print(convert('aad567BBBI'))